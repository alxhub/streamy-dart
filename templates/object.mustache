
/// An EntityGlobalFn for {{name}} entities.
typedef dynamic {{name}}GlobalFn({{name}} entity);

{{#docs}}/// {{.}}
{{/docs}}
class {{name}} extends base.EntityBase {

  static final Set<String> KNOWN_PROPERTIES = new Set<String>.from([
{{#properties}}    r'{{raw_name}}',
{{/properties}}  ]);
{{#hasKind}}  static final String KIND = """{{kind}}""";{{/hasKind}}

  String get apiType => r'{{name}}';

  /// Add a global computed synthetic property to this entity type, optionally memoized.
  static void addGlobal(String name, {{name}}GlobalFn computeFn,
      {bool memoize: false, List dependencies: null}) {
    streamy.GlobalView.register({{name}}, name, new streamy.GlobalRegistration(computeFn, dependencies, memoize));
  }
  
  {{name}}() : this.wrapMap(<String, dynamic>{});

  {{name}}.wrapMap(Map map) {
    base.setMap(this, map);
  }

{{#properties}}
{{#docs}}  /// {{.}}
{{/docs}}
  {{type}} get {{field_name}} => this[r'{{raw_name}}'];
  set {{field_name}}({{type}} value) {
{{#list}}/*
    if (value != null && value is! obs.ObservableList) {
      value = new obs.ObservableList.from(value);
    }
*/{{/list}}
    this[r'{{raw_name}}'] = value;
  }
  {{type}} {{remover_name}}() => remove(r'{{raw_name}}');
{{/properties}}

  factory {{name}}.fromJsonString(String strJson, streamy.Trace trace,
      {streamy.TypeRegistry typeRegistry: streamy.EMPTY_REGISTRY}) =>
          new {{name}}.fromJson(streamy.jsonParse(strJson), typeRegistry: typeRegistry);

  static {{name}} entityFactory(Map json, streamy.TypeRegistry reg) =>
      new {{name}}.fromJson(json, typeRegistry: reg);

  factory {{name}}.fromJson(Map json,
      {streamy.TypeRegistry typeRegistry: streamy.EMPTY_REGISTRY, bool copy: false}) {
    if (json == null) {
      return null;
    }
    if (copy) {
      json = new Map.from(json);
    }
{{#properties}}
  {{#hasParseExpr}}
    if (json.containsKey(r'{{raw_name}}')) {
      json[r'{{raw_name}}'] = {{parseExpr}}(json[r'{{raw_name}}']);
    }
  {{/hasParseExpr}}
{{/properties}}
    streamy.deserializeUnknown(json, KNOWN_PROPERTIES, typeRegistry);
    return new {{name}}.wrapMap(json);
  }

  Map toJson() {
    Map json = new Map.from(base.getMap(this));
{{#properties}}
  {{#hasToJsonExpr}}
    streamy.serialize(json, r'{{raw_name}}', {{toJsonExpr}});
  {{/hasToJsonExpr}}
{{/properties}}
    return json;
  }

  {{name}} clone() => copyInto(new {{name}}());
  {{name}} patch() => super.patch();

  Type get streamyType => {{name}};
}
