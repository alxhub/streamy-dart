
/// An EntityGlobalFn for {{name}} entities.
typedef dynamic {{name}}GlobalFn({{name}} entity);

{{#docs}}/// {{.}}
{{/docs}}
class {{name}} extends streamy.EntityWrapper {
  static final Map<String, streamy.GlobalRegistration> _globals = <String, streamy.GlobalRegistration>{};

  static final Set<String> KNOWN_PROPERTIES = new Set<String>.from([
{{#properties}}    r'{{raw_name}}',
{{/properties}}  ]);
{{#hasKind}}  static final String KIND = """{{kind}}""";{{/hasKind}}

  String get apiType => r'{{name}}';

  /// Add a global computed synthetic property to this entity type, optionally memoized.
  static void addGlobal(String name, {{name}}GlobalFn computeFn,
      {bool memoize: false, List dependencies: null}) {
    if (memoize) {
      if (dependencies != null) {
        throw new ArgumentError('Memoized function should not have dependencies.');
      }
      _globals[name] = new streamy.GlobalRegistration(streamy.memoizeGlobalFn(computeFn));
    } else {
      _globals[name] = new streamy.GlobalRegistration(computeFn, dependencies);
    }
  }

  {{name}}() : super.wrap(new streamy.RawEntity(), (cloned) => new {{name}}._wrap(cloned), globals: _globals);
  {{name}}.fromMap(Map map) : super.wrap(new streamy.RawEntity.fromMap(map), (cloned) => new {{name}}._wrap(cloned), globals: _globals);
  {{name}}.wrapMap(obs.ObservableMap map) : super.wrap(new streamy.RawEntity.wrapMap(map), (cloned) => new {{name}}._wrap(cloned), globals: _globals);

  {{name}}._wrap(streamy.Entity entity) : super.wrap(entity, (cloned) => new {{name}}._wrap(cloned), globals: _globals);

  {{name}}.wrap(streamy.Entity entity, streamy.EntityWrapperCloneFn cloneWrapper) :
      super.wrap(entity, (cloned) => cloneWrapper(cloned), globals: _globals);

{{#properties}}
{{#docs}}  /// {{.}}
{{/docs}}
  {{type}} get {{field_name}} => this[r'{{raw_name}}'];
  set {{field_name}}({{type}} value) {
{{#list}}
    if (value is! obs.ObservableList) {
      value = new obs.ObservableList.from(value);
    }
{{/list}}
    this[r'{{raw_name}}'] = value;
  }
  {{type}} {{remover_name}}() => this.remove(r'{{raw_name}}');
{{/properties}}

  factory {{name}}.fromJsonString(String strJson, streamy.Trace trace,
      {streamy.TypeRegistry typeRegistry: streamy.EMPTY_REGISTRY}) {
      trace.record(new streamy.BeginDeserializeTraceEvent(strJson.length));
      var parsed = streamy.jsonParse(strJson);
      trace.record(new streamy.JsonParsedTraceEvent());
      var res = new {{name}}.fromJson(parsed, typeRegistry: typeRegistry);
      trace.record(new streamy.EndDeserializeTraceEvent());
      return res;
  }

  static {{name}} entityFactory(Map json, streamy.TypeRegistry reg) =>
      new {{name}}.fromJson(json, typeRegistry: reg);

  factory {{name}}.fromJson(Map json,
      {streamy.TypeRegistry typeRegistry: streamy.EMPTY_REGISTRY, bool copy: false}) {
    if (json == null) {
      return null;
    }
    if (copy) {
      json = new obs.ObservableMap.from(json);
    }
    var list;
    var len;
    var result = new {{name}}.wrapMap(json);
    var fields = result.fieldNames.toList();
{{#properties}}
  {{#hasParseExpr}}
    result[r'{{raw_name}}'] = {{parseExpr}}(result[r'{{raw_name}}']);
  {{/hasParseExpr}}
    fields.remove(r'{{raw_name}}');
{{/properties}}
    for (var i = 0; i < fields.length; i++) {
      result[fields[i]] = streamy.deserialize(result[fields[i]], typeRegistry);
    }
    return result;
  }

  Map toJson() {
    Map map = super.toJson();
{{#properties}}
  {{#hasToJsonExpr}}
    if (map.containsKey(r'{{raw_name}}')) {
      map[r'{{raw_name}}'] = {{toJsonExpr}}(map[r'{{raw_name}}']);
    }
  {{/hasToJsonExpr}}
{{/properties}};
    return map;
  }

  {{name}} clone() => super.clone();
  {{name}} patch() => super.patch();

  Type get streamyType => {{name}};
}
